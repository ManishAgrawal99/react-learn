React Vocab

One way data flow
JSX
Components
State
Props
Virtual DOM
element
Flux/Redux


Installation
------------

yarn global add create-react-app@1.5.2

create-react-app --help

create-react-app confusion


JSX
---
Java Script Extensions

It is an Extension to the JS syntax to let us include HTML in it
It avoids the seperation of the HTML and JS files and allows the HTML to directly use values evaluated from JS



bootstrap and reactstrap
-------------------------
bootstrap cannot be used directly in react and hence it is reimplemented in reactstrap

yarn add bootstrap@4.0.0
yarn add reactstrap@5.0.0
yarn add react-popper@0.9.2ss


Components
----------
A Component returns a set of react elements that should appear on the screen
It is used to split the UI into independent pieces
Components also accepts inputs

User defined Component must always start with capital letters
The one with small letters are interpreted as inbuilt DOM tags


State
-----
Each Component can store its own local information in its State
The information is privately owned and controlled by the Component
It can be passed to its children using Props
Only class Components can have State

Lifting the state up
----------------------
Sometimes the data is required to be shared by several Components
At these times, we can give the state to be of one of the upper level components and the lower 
ones could get the data from there
But we can also lift the state from child to parent to make it more convenient

For lifting, we import the data inside the parent Component
This data is then passed to the child using props

List and keys
-------------
Using the map function we can lay out all the elements of a list
Every element must be associated with a key


Life Cycle of a Component
-------------------------
Every class component has a life Cycle associated with it 
As and when the components are required, they are added to the DOM of application

Life Cycle stages
1. Mounting
2. Updating
3. Unmounting

Mounting life cycle methods
constructor()
getDerivedStateFromProps()
render()
componentDidMount()

Updating can be done by making changes to props or state
Updating lifecycle methods
getDerivedStateFromProps()
render()
shouldComponentUpdate()
getSnapshotBeforeUpdate()
componentDidUpdate()


functional component
---------------------

class component requires to extend the React.component
                requires the render() method
                can have local states

functional are much simpler
A simple function that returns a collection of React elements
Receives props as parameters
cannot have local state and access to lifecycle hooks



react Virtual DOM
------------------
Virtual DOM also used in Vue

it is a light weight representation of browser DOM
It creates a tree of objects in the memory itself
Hence the manipulation is extremely fast
on Every setState, it is created completely from scratch

Once the changes are defined in the Virtual DOM,
the difference in the previous DOM and this Virtual DOM is seen and accordingly the required
DOM elements are rerendered

Updating the DOM

Diffing algorith will detect all those nodes that are changed
    if the keys of the subtree change, the entire subtree is re-rendered
    If the key does not change, the subtree need not change

New algorithm
React Fiber
Incremental rendering

